#!/usr/bin/env node
'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_yargs2.default.usage('Usage: $0').command('generate', 'generate your split-guide', {
  templatesDir: {
    default: inCwd('./templates'),
    coerce: coerceToCwd
  },
  exercisesDir: {
    default: inCwd('./exercises'),
    coerce: coerceToCwd
  },
  exercisesFinalDir: {
    default: inCwd('./exercises-final'),
    coerce: coerceToCwd
  },
  noClean: {
    type: 'boolean'
  },
  ignore: {
    type: 'array'
  },
  silentSuccess: {
    type: 'boolean'
  },
  silentAll: {
    type: 'boolean'
  }
}, generate).help('h').alias('h', 'help').argv;

function generate(options) {
  return (0, _index2.default)(options).then(function (savedFiles) {
    if (!options.silentSuccess && !options.silentAll) {
      var count = savedFiles.length;
      var files = 'file' + (count === 1 ? '' : 's');
      var colon = '' + (count === 0 ? '' : ':');
      process.stdout.write(('\n' + _chalk2.default.green('Saved ' + count + ' ' + files + colon) + '\n' + savedFiles.join('\n') + '\n      ').trim());
    }
    return savedFiles;
  }, function (error) {
    if (!options.silentAll) {
      process.stderr.write(error.toString());
    }
    return Promise.reject(error);
  });
}

function inCwd(p) {
  return _path2.default.resolve(process.cwd(), p);
}

function coerceToCwd(val) {
  if (_path2.default.isAbsolute(val)) {
    return val;
  } else {
    return inCwd(val);
  }
}