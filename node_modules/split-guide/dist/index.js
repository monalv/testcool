'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _pLimit = require('p-limit');

var _pLimit2 = _interopRequireDefault(_pLimit);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var REGEX = {
  final: / *?\/\/ FINAL_START.*?\n((.|\n|\r)*?) *\/\/ FINAL_END.*?\n/g,
  workshop: / *?\/\/ WORKSHOP_START.*?\n((.|\n|\r)*?) *\/\/ WORKSHOP_END.*?\n/g,
  comment: / *?\/\/ COMMENT_START.*?\n((.|\n|\r)*?) *\/\/ COMMENT_END.*?\n/g
};
var openFileLimit = (0, _pLimit2.default)(100);

exports.default = splitGuide;


function splitGuide() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      templatesDir = _ref.templatesDir,
      exercisesDir = _ref.exercisesDir,
      exercisesFinalDir = _ref.exercisesFinalDir,
      noClean = _ref.noClean,
      ignore = _ref.ignore;

  return deletePreviouslyGeneratedFiles().then(getFiles).then(readAllFilesAsPromise).then(createNewFileContents).then(saveFiles);

  function getFiles() {
    var filesGlob = _path2.default.join(templatesDir, '**', '*');
    var globOptions = { nodir: true, ignore: ignore };
    return (0, _pify2.default)(_glob2.default)(filesGlob, globOptions);
  }

  function deletePreviouslyGeneratedFiles() {
    if (noClean) {
      return Promise.resolve();
    }
    var pRimraf = (0, _pify2.default)(_rimraf2.default);
    var opts = { disableGlob: true };
    return Promise.all([pRimraf(exercisesDir, opts), pRimraf(exercisesFinalDir, opts)]);
  }

  function readFileAsPromise(file) {
    return (0, _pify2.default)(_fs2.default.readFile)(file, 'utf8').then(function (contents) {
      return { file: file, contents: contents };
    });
  }

  function readAllFilesAsPromise(files) {
    var allPromises = files.map(function (file) {
      return openFileLimit(function () {
        return readFileAsPromise(file);
      });
    });
    return Promise.all(allPromises);
  }

  function createNewFileContents(fileObjs) {
    return fileObjs.map(function (fileObj) {
      return Object.assign({
        finalContents: createFinalContents(fileObj.contents),
        workshopContents: createWorkshopContents(fileObj.contents)
      }, fileObj);
    });
  }

  function createFinalContents(contents) {
    return contents.replace(REGEX.final, '$1').replace(REGEX.workshop, '').replace(REGEX.comment, '');
  }

  function createWorkshopContents(contents) {
    return contents.replace(REGEX.workshop, '$1').replace(REGEX.final, '').replace(REGEX.comment, '');
  }

  function saveFiles(fileObjs) {
    var allPromises = fileObjs.reduce(function (all, fileObj) {
      return [].concat(_toConsumableArray(all), _toConsumableArray(saveFinalAndWorkshop(fileObj)));
    }, []);
    return Promise.all(allPromises);
  }

  function saveFinalAndWorkshop(_ref2) {
    var file = _ref2.file,
        workshopContents = _ref2.workshopContents,
        finalContents = _ref2.finalContents;

    var relativeDestination = _path2.default.relative(templatesDir, file);
    var workshopDestination = _path2.default.resolve(exercisesDir, relativeDestination);
    var finalDestination = _path2.default.resolve(exercisesFinalDir, relativeDestination);
    return [workshopContents ? openFileLimit(function () {
      return saveFile(workshopDestination, workshopContents);
    }) : null, finalContents ? openFileLimit(function () {
      return saveFile(finalDestination, finalContents);
    }) : null].filter(Boolean); // filter out the files that weren't saved
  }

  function saveFile(file, contents) {
    return (0, _pify2.default)(_mkdirp2.default)(_path2.default.dirname(file), {}).then(function () {
      return (0, _pify2.default)(_fs2.default.writeFile)(file, contents).then(function () {
        return file;
      });
    }, (0, _utils.getErrorLogger)('mkdirp(' + _path2.default.dirname(file) + ')'));
  }
}